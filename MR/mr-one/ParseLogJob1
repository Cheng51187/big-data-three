package java;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class ParseLogJob extends Configured implements Tool {
    //解析日志函数parseLog
    public  static Text parseLog(String row) throws ParseException {
        //split函数将数据切开(数据分三部分：时间戳、事件名称、业务的Json字符串)
        String[] logPart = StringUtils.split(row, "\u1111");
        //时间戳转换为long类型的时间戳
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
        long timeTag = dateFormat.parse(logPart[0]).getTime();
        //命名事件名称
        String activeName =logPart[1];
        //Json字符串解析为JSONObject
        JSONObject bizData = JSON.parseObject(logPart[2]);

        //使用putAll将以上数据全部打包到一个大的JSONObject中转换成Json数据并返回
        JSONObject logData = new JSONObject();
        logData.put("active_name", activeName);
        logData.put("time_tag", timeTag);
        logData.putAll(bizData);

        return new Text(logData.toJSONString());
    }
    //重写Map方法,
    public static class LogMapper extends Mapper<LongWritable, Text, NullWritable, Text> {
        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
            //调用parseLog函数将数据写出来(因上有抛出异常操作，所以下面将捕获异常)
            try {
                Text parsedLog = parseLog(value.toString());
                context.write(null, parsedLog);
            } catch (ParseException e) {
                e.printStackTrace();
            }

        }
    }
    //运行程序
    public  static void main (String[] args) throws IOException, ClassNotFoundException, InterruptedException {
        //首先初始化一个hadoop的配置文件(注意选对Configuration(.hadoop.conf))
        Configuration config = new Configuration();
        //利用hadoop首先读取配置文件特性，新建一个Job来设置一些参数，抛出异常
        Job job = Job.getInstance(config);
        job.setJarByClass(ParseLogJob.class);
        job.setJobName("parselog");
        job.setMapperClass(LogMapper.class);
        //不需要Reduce需要将个数设为0，否则报错
        job.setNumReduceTasks(0);

        //指定程序输入和输出路径,当MR程序运行起来时，有输出路径会报错
        FileInputFormat.addInputPath(job, new Path(args[0]));
        Path outputPath = new Path(args[1]);
        FileOutputFormat.setOutputPath(job, outputPath);

        //判断如果有输出路径就删除
        FileSystem fs = FileSystem.get(config);
        if (fs.exists(outputPath)) {
            fs.delete(outputPath, true);
        }

        //运行起来Job,此时等待MR程序运行的完成，所以需要加一个判断，检验是否完成
        if (!job.waitForCompletion(true)); {
            throw new RuntimeException(job.getJobName() + "failed");
        }
    }
}
